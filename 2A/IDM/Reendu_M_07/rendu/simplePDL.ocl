import 'SimplePDL.ecore'

package simplepdl

context Process
-- 1
-- example invariant with a custom error message to verify that
-- the 'name' property of all 'simplepdl::Process' instances is non-null
--
inv NonNull_name('The \'name\' property of "' + self.toString() + '" is null'):
name <> null

context Process
-- 2
-- deux activités différentes d’un même processus ne peuvent pas avoir le même nom
--
inv Different_nom_activites('Même nom pour deux activités du processus: ' + self.name):
self.processElements
->select(pe | pe.oclIsKindOf(WorkDefinition))
->collect(pe | pe.oclAsType(WorkDefinition))
->forAll(w | self = w or self.name <> w.name)

context WorkSequence
-- 3
-- une dépendance ne peut pas être réflexive
--
inv Non_reflexif('Dépendance Réflexive:'):
self.predecessor <> self.successor

context WorkDefinition
-- 4
-- le nom d’une activité doit être composé d’au moins deux caractères
-- ET
-- le nom d’une activité ne doit être composé que de lettres, chiffres ou soulignés, un chiffre
-- ne peut pas être première position.
--
inv Nom_valide('Nom invalide: ' + self.name):
self.name.matches('[A-Za-z_][A-Za-z0-9_]+')

context Ressources
-- 5
-- le nom d’une ressource doit être composé d’au moins deux caractères
-- ET
-- le nom d’une ressource ne doit être composé que de lettres, chiffres ou soulignés, un chiffre
-- ne peut pas être première position.
--
inv Nom_valide('Nom invalide: ' + self.name):
self.name.matches('[A-Za-z_][A-Za-z0-9_]+')

context Ressources
-- 6
-- la quantité de ressources est toujours positive ou nulle
--
inv Quantite_valide('Quantité invalide: ' + self.quantity.toString()) :
self.quantity >= 0

context Process
-- 7
-- deux ressources différentes d’un même processus ne peuvent pas avoir le même nom
--
inv Different_nom('Même nom pour deux activités du processus: ' + self.name):
self.processElements
->select(pe | pe.oclIsKindOf(Ressources))
->collect(pe | pe.oclAsType(Ressources))
->forAll(w | self = w or self.name <> w.name)

context BesoinRessources
-- 8
-- le besoin en ressources est toujours positif ou nul
--
inv Quantite_valide('Quantités invalides pour les besoins en ressources') :
self.need >= 0

endpackage