/**mini-projet
 * @author ALOUANE Issam
 */

import java.awt.Color;

public class Cercle implements Mesurable2D {

    private Point Centre;
    private double Rayon;
    private Color couleur;
    

    public final static double PI = Math.PI;

	/** Construire un cercle à partir de son centre et de son rayon.
	 * @param centre 
	 * @param rayon
	 */
	public Cercle(Point centre, double rayon) {
	    assert(centre!=null && rayon>0);
		this.Rayon = rayon;
        this.Centre = new Point (centre.getX(),centre.getY());
		this.couleur = Color.blue;
	}
	
	/** Construire un cercle à partir de deux points diamétralement opposés.
	 * @param A le premier point
	 * @param B le deuxième point
	 */
	public Cercle(Point A, Point B) {
	    assert(A!=null && B!=null);
	    assert(A.getX() != B.getX() || A.getY() != B.getY());
		this.Rayon = A.distance(B)/2.0;
		this.Centre = new Point((A.getX()+B.getX())/2.0,(A.getY()+B.getY())/2.0);
		this.couleur = Color.blue;
	}
	
	/** Construire un cercle à partir de deux points diamétralement opposés et de sa couleur.
	 * @param A le premier point
	 * @param B le deuxième point
	 * @param couleur la couleur du cercle
	 */
	public Cercle(Point A, Point B, Color couleur) {
	    assert(A!=null && B!=null && couleur!=null);
	    assert(A.getX() != B.getX() || A.getY() != B.getY());
		this.Rayon = A.distance(B)/2.0;
		this.Centre = new Point ((A.getX()+B.getX())/2.0, (A.getY()+B.getY())/2.0);
		this.couleur = couleur;
	}
	
	/** Construire un cercle à partir de son centre et d'un point de sa circonférence.
	 * @param A le centre du cercle
	 * @param B le point qui appartient au cercle
	* @return le cercle créé
	 */
	public static Cercle creerCercle(Point centre, Point B) {
	    assert(centre!=null && B!=null);
	    assert(centre.getX() != B.getX() || centre.getY() != B.getY());
	    return new Cercle(centre, centre.distance(B));
	}
	
	/** Translater le cercle.
	* @param dx déplacement du centre suivant l'axe des X
	* @param dy déplacement de centre suivant l'axe des Y
	*/
	public void translater(double dx, double dy) {
		this.Centre.translater(dx,dy);
	}
	
	/** obtenir le centre d'un cercle.
	* @return le centre du cercle
	*/
	public Point getCentre() {
        Point P = new Point(this.Centre.getX(), this.Centre.getY());
        return P;
	}
	
	/** obtenir le rayon d'un cercle.
	* @return le rayon du cercle
	*/
	public double getRayon() {
	    return this.Rayon;
	}
	
	/** obtenir le diamètre d'un cercle.
	* @return le diamètre du cercle
	*/
	public double getDiametre() {
	    return 2.0 * this.Rayon;
	}
	
	/** Savoir si un point est à l'intérieur ou pas.
	* @param A le point à tester
	*/
	public boolean contient(Point A) {
	    assert(A!=null);
		return (this.Centre.distance(A) <= this.Rayon);
	}
	
	/** obtenir le périmètre d'un cercle.
	* @return le perimètre du cercle
	*/
	public double perimetre() {
	    return 2.0 * PI * this.Rayon;
	}
	
	/** obtenir la surface d'un cercle.
	* @return la surface du cercle
	*/
	public double aire() {
	    return PI * this.Rayon * this.Rayon;
	}
	
	/** Obtenir la couleur du cercle.
	 * @return la couleur du cercle
	 */
	public Color getCouleur() {
		return this.couleur;
	}

	/** Changer la couleur du cercle.
	  * @param nouvelleCouleur nouvelle couleur
	  */
	public void setCouleur(Color nouvelleCouleur) {
	    assert(nouvelleCouleur!=null);
		this.couleur = nouvelleCouleur;
	}
	
	/** Afficher le cercle. */
	public String toString() {
		return "C" + this.Rayon + "@" + this.Centre.toString();
	}
	
	public void afficher(){
        System.out.print(this);
    }
	
	/** Changer le rayon du cercle.
	  * @param rayon le nouveau rayon
	  */
	public void setRayon(double nouveau_rayon) {
	    assert(nouveau_rayon>0);
		this.Rayon = nouveau_rayon;
	}
	
	/** Changer le diamètre du cercle.
	  * @param diametre le nouveau diamètre
	  */
	public void setDiametre(double nouveau_diametre) {
	    assert(nouveau_diametre>0);   
		this.Rayon = nouveau_diametre / 2.0;
	}

}
