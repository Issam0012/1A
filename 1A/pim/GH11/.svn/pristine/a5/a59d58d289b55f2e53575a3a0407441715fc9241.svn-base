--generic
--type Unbounded_string is private;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;

package arbre_binaire is

   type T_AB is private;  
    

   -- Initialiser une arbre binaire.  La Arbre est vide.
   procedure Initialiser(Arbre: out T_AB) with
     Post => Est_Vide (Arbre);


   -- Est-ce qu'une Arbre est vide ? 
   function Est_Vide (Arbre : in T_AB) return Boolean;
    
    
   --Les quatres fonctions suivantes renvoient l'indice et la valeur et le fils droit et le fils gauche
   function Indice (Arbre : in T_AB) return Integer;
   function Valeur (Arbre : in T_AB) return Unbounded_String;


   -- Obtenir le nombre d'éléments d'une Arbre. 
   function Taille (Arbre : in T_AB) return Integer with
     Post => Taille'Result >= 0
     and (Taille'Result = 0) = Est_Vide (Arbre);
   
   function Fils_gauche(Arbre : in T_AB) return T_AB with
     Pre => Taille(Arbre)>0;
   function Fils_droit(Arbre : in T_AB) return T_AB with
     Pre => Taille(Arbre)>0;


   -- Enregistrer une Donnée associée à une Clé dans une Arbre.
   -- Si la clé est déjà présente dans la Arbre, sa donnée est changée.
   procedure Enregistrer (Arbre : in out T_AB ; Indice : in Integer ; Valeur : in Unbounded_string);
    
    
   --Associer deux arbres
   procedure Associer (Arbre_1 : in out T_AB ; Arbre_2: in T_AB);
    
    
   --Permuter les valeurs de 2 arbres
   procedure Permutation (Arbre_1 : in out T_AB ; Arbre_2: in out T_AB);


   -- Supprimer la Donnée associée à une Clé dans une Arbre.
   -- Exception : Indice_Absente_Exception si Clé n'est pas utilisée dans la Arbre
   procedure Supprimer (Arbre : in out T_AB ; Indice : in Integer) with
     Post =>  Taille (Arbre) = Taille (Arbre)'Old - 1; -- un élément de moins
   
       
   -- Supprimer tous les éléments d'une Arbre.
   procedure Vider (Arbre : in out T_AB) with
     Post => Est_Vide (Arbre);
    
    
   -- L'affichage d'une arbre
   Procedure affichage_arbre(arbre : in T_AB; indice_droit: in integer; indice_gauche: in integer);
   

private

	
   type T_noeud;

   type T_AB is access T_noeud;
    
   type T_noeud is 
      record
         Indice : Integer;
         Valeur : Unbounded_string;
         Fils_D : T_AB;
         Fils_G : T_AB;
      end record;
    
end arbre_binaire;
