with Ada.Text_IO;           use Ada.Text_IO;
--with Ada.Integer_Text_IO;   use Ada.Integer_Text_IO;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
-- with Ada.Streams.Stream_IO; use Ada.Streams.Stream_IO;
with Ada.Sequential_IO ;	-- pour l'accÃƒÂ¨s typÃƒÂ© aux fichiers (integer, naturel, float, etc.)
with Ada.Command_line; use Ada.Command_line;
with arbre_binaire; use arbre_binaire;
with tableau;
with lca;

procedure Compression is
    
   Taille_table : Constant Integer := 256;
    
   --Occurence : Integer := 0;
    
   type T_Octet is mod 2 ** 8;	-- sur 8 bits
   for T_Octet'Size use 8;
   
   package Octet_file is 
     new Ada.Sequential_IO(T_Octet); 
   use Octet_file ;
   
   package LCA_codage is
     new LCA(T_Cle    => Unbounded_String, T_Donnee => Unbounded_String);
   use LCA_codage;
   
   procedure Affichage(Cle : in Unbounded_String; Donnee : in Unbounded_String) is
   begin
      Put("==");
      Put('[');
      Put (To_String(Donnee));
      Put('|');
      Put (To_String(Cle));
      Put(']');
   end Affichage;
   
   procedure Afficher_codage is new LCA_codage.Pour_Chaque (Affichage);

   -- File_Name : String :=  "exemple_fichier.out";
   -- File      : Ada.Streams.Stream_IO.File_Type;	-- car il y a aussi Ada.Text_IO.File_Type
   file_txt : Ada.Text_IO.file_type;
   -- S         : Stream_Access;
   Octet     : T_Octet;
   un_char : Character;
   un_octet : T_Octet;
   --un_char_test : Character;
   
   Str_save : Unbounded_String;

   package Tab is
     new tableau (Taille_table);
   use Tab;    


   Tableau_AB : T_Tableau;
  -- nb_arbres, nb_feuilles : integer;
   Arbre_Huffman : T_AB;
   
   LCA_cara_code : T_LCA;
   
   procedure Parcours_infixe(Arbre : in T_AB; LCA : in out T_LCA) is
      Parcours_Huffman : Unbounded_String;
      Parcours_caractere : Unbounded_String;
   begin
      if not(Est_Vide(Fils_gauche(Arbre))) then
         Parcours_infixe(Fils_gauche(Arbre),LCA);
         Parcours_Huffman := Parcours_Huffman & "0";
         Parcours_caractere := Parcours_caractere & "0";
      else
         Enregistrer(LCA_cara_code, Valeur(Arbre), Parcours_caractere);
         -- Parcours_caractere <-- Parcours_caractere(1,Length(Parcours_caractere)-1)
      end if;
      if not(Est_Vide(Fils_droit(Arbre))) then
         Parcours_infixe(Fils_droit(Arbre),LCA);
         Parcours_Huffman := Parcours_Huffman & "1";
         Parcours_caractere := Parcours_caractere & "1";
      else
         Enregistrer(LCA_cara_code, Valeur(Arbre), Parcours_caractere);
         -- Parcours_caractere <-- Parcours_caractere(1,Length(Parcours_caractere)-1)
      end if;
      
         
   end Parcours_infixe;
    
begin

   Initialiser(Tableau_AB);
   
   open (file_txt, In_File, "file_txt.txt"); 	-- Ouverture du fichier en lecture 
   
   -- Determination de la fréquence d'appartition de chaque caractère
   while not End_Of_File(file_txt) loop
      Str_save := To_Unbounded_String(" ");
      Get_immediate (file_txt, un_char);
      Replace_Element(Str_save,1,un_char);
      if un_char = character'val(10) then
         if not (Valeur_existe(Tableau_AB, To_Unbounded_String("\n"))) then
            Enregistrer(Tableau_AB, 1, To_Unbounded_String("\n"));
         else
            Incrementer(Tableau_AB, indice_valeur(Tableau_AB, To_Unbounded_String("\n")));
         end if;
      else
         if not (Valeur_existe(Tableau_AB, Str_save)) then
            Enregistrer(Tableau_AB, 1, Str_save);
         else
            Incrementer(Tableau_AB, indice_valeur(Tableau_AB, Str_save));
         end if;
      end if;

      --Put("Octet = " & T_Octet'Image(Octet));
      --Put(" '" & Character'Val(Octet) & "'");
      --New_Line;        
   end loop;
   --Enregistrer(Tableau_AB, 0, To_Unbounded_String("\$"));

   -- Fermer le fichier
   Close (file_txt);
    
   -- Tri du tableau dans l'ordre croissant
   Tri_Tab(Tableau_AB);
    
   --La construction de l'arbre de Huffman
   afficher_tab(Tableau_AB);
    
   while Taille(Tableau_AB) > 1 loop
      Associer(Tableau_AB, 1, 2);
   end loop;
    
        
   afficher_tab(Tableau_AB);
   
   Extraction_arbre(Tableau_AB, Arbre_Huffman, 1);
   
   -- Parcours infixe pour récuperer le codage de chaque caractère
   Initialiser(LCA_cara_code);   
   Parcours_infixe(Arbre_Huffman, LCA_cara_code);   
   Afficher_codage(LCA_cara_code);
    
   -- Suppresion des pointeurs
   Vider(Tableau_AB);
   Vider(LCA_cara_code);
   Vider(Arbre_Huffman);
end Compression;
