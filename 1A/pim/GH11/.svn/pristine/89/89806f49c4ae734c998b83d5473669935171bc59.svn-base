with arbre_binaire;

generic
   type T_Indice is private;
   type T_Valeur is private;
   with function sum(a: T_Indice; b: T_Indice) return T_Indice;
   index_debut : Integer;
   Taille_table : Integer;

package Tableau is

   type T_Tableau is limited private;  
   type Tab_AB is private;
    

   -- Initialiser une Tab binaire.  La Tab est vide.
   procedure Initialiser(Tab: out T_Tableau) with
     Post => Est_Vide (Tab);

      
   -- Est-ce qu'une Tab est vide ?
   function Est_Vide (Tab : T_Tableau) return Boolean;
    
    
   --le tableau inclus dans l'enregistrement
   function tableau_enregistrement(Tab : T_Tableau) return Tab_AB;

   
   -- Enregistrer une Donnée associée à une Clé dans une Tab.
   -- Si la clé est déjà présente dans la Tab, sa donnée est changée.
   procedure Enregistrer (Tab : in out T_Tableau ; Indice : in T_Indice ; Valeur : in T_Valeur; index : in Integer);
    
   
   -- Echange l'indice et la valeur avec la l'indice et la valeur de notre choix
   procedure Echanger(Tab: out T_Tableau; emplacement_d: in Integer; emplacement_a: in Integer);-- with
   --Pre => emplacement <= Tab.Taille,
   --Post => T_Tableau.Taille = T_Tableau.Taille'Old and Tab.all.Valeur = Tab.all.Valeur'Old;

   
   function Valeur_existe(Tab : in T_Tableau; Valeur : in T_Valeur) return Boolean;
   
   -- Supprimer la Donnée associée à une Clé dans une Tab.
   -- Exception : Indice_Absente_Exception si Clé n'est pas utilisée dans la Tab
   procedure Supprimer (Tab : in out T_Tableau ; emplacement : in Integer); -- with
   -- Post =>  Taille (Arbre) = Taille (Arbre)'Old - 1; -- un élément de moins

   
   -- Supprimer tous les éléments d'une Tab.
   procedure Vider (Tab : in out T_Tableau) with
     Post => Est_Vide (Tab);

private
   
   package M_AB is new arbre_binaire(T_Indice, T_Valeur,sum);

   type Tab_AB is array (1..Taille_table) of M_AB.T_AB;
   
   type T_Tableau is 
      record
         Tableau : Tab_AB;
         Taille: Integer := 0;
      end record;
       
end Tableau;
