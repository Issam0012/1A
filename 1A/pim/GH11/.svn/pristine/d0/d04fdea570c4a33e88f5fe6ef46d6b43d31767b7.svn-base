generic
   type T_Indice is private;
   type T_Valeur is private;
   with function sum(a: T_Indice; b: T_Indice) return T_Indice; 

package arbre_binaire is

   type T_AB is limited private;  
    

   -- Initialiser une arbre binaire.  La Arbre est vide.
   procedure Initialiser(Arbre: out T_AB) with
     Post => Est_Vide (Arbre);


   -- Est-ce qu'une Arbre est vide ?
   function Est_Vide (Arbre : T_AB) return Boolean;
    
    
   --Les quatres fonctions suivantes renvoient l'indice et la valeur et le fils droit et le fils gauche
   function Indice (Arbre : T_AB) return T_Indice;
   function Valeur (Arbre : T_AB) return T_Valeur;
   function fils_G (Arbre : T_AB) return T_AB;
   function fils_D (Arbre : T_AB) return T_AB;


   -- Obtenir le nombre d'éléments d'une Arbre. 
   function Taille (Arbre : in T_AB) return Integer with
     Post => Taille'Result >= 0
     and (Taille'Result = 0) = Est_Vide (Arbre);
   
   
   -- Permute deux arbres
   procedure Permutation(Arbre1 : out T_AB ; Arbre2 : out T_AB);


   -- Enregistrer une Donnée associée à une Clé dans une Arbre.
   -- Si la clé est déjà présente dans la Arbre, sa donnée est changée.
   procedure Enregistrer (Arbre : in out T_AB ; Indice : in T_Indice ; Valeur : in T_Valeur);
    
    
   --Associer deux arbres
   procedure Associer (Arbre_1 : in out T_AB ; Arbre_2: in T_AB ; Valeur : in T_Valeur);


   -- Supprimer la Donnée associée à une Clé dans une Arbre.
   -- Exception : Indice_Absente_Exception si Clé n'est pas utilisée dans la Arbre
   procedure Supprimer (Arbre : in out T_AB ; Indice : in T_Indice) with
     Post =>  Taille (Arbre) = Taille (Arbre)'Old - 1; -- un élément de moins

    
   -- Supprimer tous les éléments d'une Arbre.
   procedure Vider (Arbre : in out T_AB) with
     Post => Est_Vide (Arbre);
   
       -- Appliquer un traitement (Traiter) pour chaque couple d'une Sda.
    generic
        with procedure Traiter (Arbre: in T_AB; nombre : in Integer);
    procedure Pour_Chaque (Arbre : in T_AB; index : in Integer);


private

	
   type T_noeud;

   type T_AB is access T_noeud;
    
   type T_noeud is 
      record
         Indice : T_Indice;  -- Cle
         Valeur : T_Valeur;  -- Donnee
         Fils_D : T_AB;
         Fils_G : T_AB;
      end record;
    
end arbre_binaire;
