with Ada.Text_IO;           use Ada.Text_IO;
with Ada.Integer_Text_IO;   use Ada.Integer_Text_IO;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;

with Tableau;
with arbre_binaire;

procedure Tableau_test is

   Index_debut : Constant Integer := 1;
   Taille_table : Constant Integer := 256;

   function somme(a: in integer; b: in integer) return integer is
   begin
      return a+b;
   end somme;

   package arbre_binaire_integer_string is
     new arbre_binaire (T_Indice => Integer, T_Valeur => Unbounded_String, sum => somme);
   use arbre_binaire_integer_string;

   package Tab_integer_string is
     new Tableau (Integer,Unbounded_String,somme,Index_debut,Taille_table);
   use Tab_integer_string;

   -- Retourner une chaîne avec des guillemets autour de S
   function Avec_Guillemets (S: Unbounded_String) return String is
   begin
      return '"' & To_String (S) & '"';
   end;


   --afficher l'arbre
   Procedure affichage_arbre(arbre : in T_AB; nombre: in integer) is --nombre sera toujours remis Ã  0
   begin
      If Est_Vide(fils_G(arbre)) and Est_Vide(fils_D(arbre)) then
         Put("(");
         Put(Indice(arbre), 0);
         Put(")");
         Put(" ");
         Put(Avec_Guillemets(Valeur(arbre)));
      Else
         Put ("(");
         Put(Indice(arbre), 0);
         Put(")");
         New_Line;
         for i in 1..nombre loop
            Put("       ");
         end loop;
         Put("\--0--");
         affichage_arbre(fils_D(arbre), nombre+1);
         for i in 2..Taille(arbre)/2 loop
            Put("|");
            New_Line;
         end loop;
         for i in 1..nombre loop
            Put("       ");
         end loop;
         Put("\--1--" );
         affichage_arbre(fils_G(arbre), nombre+1);
      end if;
      New_Line;
   end affichage_arbre;

   Procedure affichage_tableau(Tab_AB : in T_Tableau) is
   begin
      for i in 1 .. Taille_table loop
         Put("emplacement ");
         Put(i,1);
         Put(":");
         affichage_arbre(tableau_enregistrement(Tab_AB)(i),0);
         New_Line;
      end loop;
   end affichage_tableau;

   Tableau_AB : T_Tableau;

begin
   Initialiser(Tableau_AB);

   Enregistrer(Tableau_AB,1,To_Unbounded_String("un"),Index_debut);
   Enregistrer(Tableau_AB,2,To_Unbounded_String("deux"),Index_debut);
   Enregistrer(Tableau_AB,3,To_Unbounded_String("trois"),Index_debut);
   Enregistrer(Tableau_AB,4,To_Unbounded_String("quatre"),Index_debut);

   affichage_tableau(Tableau_AB);

   Vider(Tableau_AB);
end Tableau_test;
