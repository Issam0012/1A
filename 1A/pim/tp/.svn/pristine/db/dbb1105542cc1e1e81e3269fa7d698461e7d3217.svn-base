--with Ada.Text_IO;            use Ada.Text_IO;
with SDA_Exceptions;         use SDA_Exceptions;
with Ada.Unchecked_Deallocation;

package body LCA is

	procedure Free is
		new Ada.Unchecked_Deallocation (Object => T_Cellule, Name => T_LCA);


	procedure Initialiser(Sda: out T_LCA) is
	begin
		Sda:=null;
	end Initialiser;


	function Est_Vide (Sda : in T_LCA) return Boolean is
	begin
		return (Sda=null);
	end;


	function Taille (Sda : in T_LCA) return Integer is
     begin
        if Est_Vide(Sda) then
            return 0;
        else
            return 1+Taille(Sda.all.suivant);
        end if;
	 end Taille;


	procedure Enregistrer (Sda : in out T_LCA ; Cle : in T_Cle ; Donnee : in T_Donnee) is
	begin
        if Est_Vide(Sda) then
            Sda:= new T_cellule'(Cle, Donnee, null);
        elsif Sda.all.cle=Cle then
            Sda.all.donnee:=Donnee;
        else
            Enregistrer(Sda.all.suivant,Cle,Donnee);
        end if;
	end Enregistrer;


	function Cle_Presente (Sda : in T_LCA ; Cle : in T_Cle) return Boolean is
	begin
        if Est_Vide(Sda) then
            return False;
        elsif Sda.all.cle=Cle then
            return True;
        else
            return False or Cle_Presente(Sda.all.suivant, Cle);
        end if;

	end;


	function La_Donnee (Sda : in T_LCA ; Cle : in T_Cle) return T_Donnee is
	begin
        if Est_Vide(Sda) then
            raise Cle_Absente_Exception;
        elsif Sda.all.cle=Cle then
            return Sda.all.donnee;
        else
            return La_Donnee(Sda.all.suivant, Cle);
        end if;
	end La_Donnee;


    procedure Supprimer (Sda : in out T_LCA ; Cle : in T_Cle) is
        A_detruire: T_LCA;
	begin
        if Est_Vide(Sda) then
            raise Cle_Absente_Exception;
        elsif Sda.all.cle=Cle then
            A_detruire:=Sda;
            Sda:=Sda.all.suivant;
            Free(A_detruire);
        else
            Supprimer(Sda.all.suivant, Cle);
        end if;

	end Supprimer;


	procedure Vider (Sda : in out T_LCA) is
	begin
		if not Est_Vide(Sda) then
			Vider (Sda.all.Suivant);
			Free (Sda);
		else
			Null;
		end if;
	end Vider;


	procedure Pour_Chaque (Sda : in T_LCA) is
    begin
        if Est_vide(Sda) then
            null;
        else
            Traiter(Sda.all.cle,Sda.all.donnee);
            Pour_Chaque(Sda.all.suivant);
        end if;

    end Pour_Chaque;


end LCA;
